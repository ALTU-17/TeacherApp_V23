package in.aceventura.evolvuschool.teacherapp.adapter;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import in.aceventura.evolvuschool.teacherapp.R;
import in.aceventura.evolvuschool.teacherapp.Sqlite.DatabaseHelper;
import in.aceventura.evolvuschool.teacherapp.activities.EvaluationQuestionActivity;
import in.aceventura.evolvuschool.teacherapp.activities.PenPaperEvaluationActivity;
import in.aceventura.evolvuschool.teacherapp.pojo.EvaluationQuestionModel;
import in.aceventura.evolvuschool.teacherapp.pojo.EvaluationStudentListModel;
import in.aceventura.evolvuschool.teacherapp.pojo.UploadEvaluationQuestionModel;

/**
 * Created by "Manoj Waghmare" on 25,Aug,2020
 **/
public class EvaluationStudentListAdapter
        extends RecyclerView.Adapter<EvaluationStudentListAdapter.ViewHolder> {

    private Context context;
    private ArrayList<EvaluationStudentListModel> evaluationStudentList;
    private ArrayList<EvaluationQuestionModel> evaluationQuestionsList = new ArrayList<>();
    ArrayList<UploadEvaluationQuestionModel> uploadEvaluationQuestionsList =
            new ArrayList<>();
    String name, dUrl, newUrl, qb_id, question_bank_id, question_id, qb_name, question_type,
            question, weightage, status, date, student_id;
    EvaluationQuestionModel evaluationQuestionModel;
    UploadEvaluationQuestionModel uploadEvaluationQuestionModel;
    String up_id, upload_student_id, upload_question_bank_id, upload_date, academic_yr,
            ques_image_name, ques_file_size, uploaded_qp_id, ans_image_name, ans_file_size,
            exam_id, class_id, subject_id, qb_type, instructions, create_date,
            teacher_id, complete;

    //constructor
    public EvaluationStudentListAdapter(Context context,
                                        ArrayList<EvaluationStudentListModel> evaluationStudentList) {
        this.context = context;
        this.evaluationStudentList = evaluationStudentList;
        DatabaseHelper mDatabaseHelper = new DatabaseHelper(context);
        name = mDatabaseHelper.getName(1);
        dUrl = mDatabaseHelper.getURL(1);
        newUrl = mDatabaseHelper.getTURL(1);

        if (name == null || name.equals("")) {
            name = mDatabaseHelper.getName(1);
            dUrl = mDatabaseHelper.getURL(1);
            newUrl = mDatabaseHelper.getTURL(1);
        }
    }

    //Binding the views with components from layout file
    public static class ViewHolder extends RecyclerView.ViewHolder {
        TextView tv_rollNo, tv_studentName, tv_date;
        Button btn_evaluate;

        public ViewHolder(@NonNull View itemView) {
            super(itemView);
            tv_rollNo = itemView.findViewById(R.id.tv_rollNo);
            tv_studentName = itemView.findViewById(R.id.tv_studentName);
            tv_date = itemView.findViewById(R.id.tv_date);
            btn_evaluate = itemView.findViewById(R.id.evaluate);
        }

    }

    //setting layout file
    @NonNull
    @Override
    public EvaluationStudentListAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent,
                                                                      int viewType) {
        return new ViewHolder(LayoutInflater.from(context)
                .inflate(R.layout.evaluation_studentlist_item, parent, false)
        );
    }


    //Logic & Setting the values to UI
    @Override
    public void onBindViewHolder(@NonNull EvaluationStudentListAdapter.ViewHolder holder,
                                 final int position) {
        final EvaluationStudentListModel model = evaluationStudentList.get(position);

        if (!model.getRollNo().equals("null")) {
            holder.tv_rollNo.setText(model.getRollNo() + ".");
        }
        else {
            holder.tv_rollNo.setText("");
        }

        holder.tv_studentName.setText(model.getFirstName() + " " + model.getLastName());
        String submittedDate = model.getSubmittedDate();

        //data to pass
        date = model.getDate();
        student_id = model.getStudentId();


        //Formatting Date
        @SuppressLint("SimpleDateFormat") SimpleDateFormat simpleDateFormat =
                new SimpleDateFormat("yyyy-MM-dd");
        Date date2 = null;
        try {
            date2 = simpleDateFormat.parse(submittedDate);

        }
        catch (ParseException e) {
            e.printStackTrace();
        }

        @SuppressLint("SimpleDateFormat") SimpleDateFormat newformat = new SimpleDateFormat("dd" +
                "-MM-yyyy");
        String newDate = null;
        if (date2 != null) {
            newDate = newformat.format(date2);
        }

        holder.tv_date.setText(newDate);

        final String student_id = model.getStudentId();
        holder.btn_evaluate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String qbType = model.getQuestion_bank_type();
                if (qbType.equals("mcq")) {
                    EvaluationStudentListModel model = evaluationStudentList.get(position);
                    HashMap<String, String> params = new HashMap<>();
                    params.put("short_name", name);
                    params.put("student_id", model.getStudentId());
                    params.put("question_bank_id", model.getQuestion_bank_id());
                    System.out.println("MCQ_EVALUATE_PARAMS" + params);

                    JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(newUrl +
                            "OnlineExamApi/evaluate_question_bank", new JSONObject(params),
                            new Response.Listener<JSONObject>() {
                                @Override
                                public void onResponse(JSONObject response) {
                                    System.out.println("MCQ_RESPONSE" + response);
                                    try {
                                        if (response.getString("status").equals("true")) {
                                            JSONArray jsonArray = response.getJSONArray(
                                                    "Question_details");
                                            Log.d("QUESTIONS_ARRAY", String.valueOf(jsonArray));

                                            for (int i = 0; i < jsonArray.length(); i++) {
                                                JSONObject jsonObject = jsonArray.getJSONObject(i);
                                                qb_id = jsonObject.getString("qb_id");
                                                question_bank_id = jsonObject.getString(
                                                        "question_bank_id");
                                                question_id = jsonObject.getString("question_id");
                                                qb_name = jsonObject.getString("qb_name");
                                                question_type = jsonObject.getString(
                                                        "question_type");
                                                question = jsonObject.getString("question");
                                                weightage = jsonObject.getString("weightage");
                                                status = jsonObject.getString("status");
                                                String ans = jsonObject.getString("answer");
                                                String correct_ans = jsonObject.getString(
                                                        "correct_answer");

                                                evaluationQuestionModel =
                                                        new EvaluationQuestionModel(qb_id,
                                                                question_bank_id, question_id,
                                                                qb_name,
                                                                question_type, question, weightage,
                                                                status, ans, correct_ans,
                                                                student_id);
                                                evaluationQuestionsList.add(evaluationQuestionModel);
                                                notifyDataSetChanged();
                                            }


                                            Intent intent = new Intent(context,
                                                    EvaluationQuestionActivity.class);
                                            intent.putExtra("qbank", evaluationQuestionsList);
                                            intent.putExtra("student_id", student_id);
                                            intent.putExtra("date", date);
                                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                            context.startActivity(intent);
                                        }
                                        else {
                                            Toast.makeText(context, response.toString(),
                                                    Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                    catch (JSONException e) {
                                        e.printStackTrace();
                                        Toast.makeText(context, e.toString(), Toast.LENGTH_SHORT).show();
                                    }
                                }
                            }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            System.out.println("ERROR_RESPONSE - " + error.getMessage());
                            Toast.makeText(context, error.toString(), Toast.LENGTH_SHORT).show();
                        }
                    });
                    RequestQueue requestQueue1 = Volley.newRequestQueue(context);
                    jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(
                            30000,
                            DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
                    requestQueue1.add(jsonObjectRequest);
                }
                else {
                    EvaluationStudentListModel model = evaluationStudentList.get(position);
                    HashMap<String, String> params = new HashMap<>();
                    params.put("short_name", name);
                    params.put("student_id", model.getStudentId());
                    params.put("question_bank_id", model.getQuestion_bank_id());
                    System.out.println("UPLOAD_EVALUATE_PARAMS" + params);

                    JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(newUrl +
                            "OnlineExamApi/get_upload_evaluate_data", new JSONObject(params),
                            new Response.Listener<JSONObject>() {
                                @Override
                                public void onResponse(JSONObject response) {
                                    System.out.println("UPLOAD_RESPONSE" + response);
                                    try {
                                        if (response.getString("status").equals("true")) {
                                            JSONArray jsonArray = response.getJSONArray("data");

                                            for (int i = 0; i < jsonArray.length(); i++) {
                                                JSONObject jsonObject = jsonArray.getJSONObject(i);

                                                JSONArray qbArray = jsonObject.getJSONArray(
                                                        "Question_bank");
                                                Log.d("qb_array",qbArray.toString());
                                                for (int j = 0; j < qbArray.length(); j++) {
                                                    JSONObject qbObject = qbArray.getJSONObject(j);
                                                    up_id = qbObject.getString("up_id");
                                                    upload_student_id = qbObject.getString(
                                                            "student_id");
                                                    upload_question_bank_id = qbObject.getString(
                                                            "question_bank_id");
                                                    upload_date = qbObject.getString("date");
                                                    academic_yr = qbObject.getString("academic_yr");
                                                    ques_image_name = qbObject.getString(
                                                            "image_name");
                                                    ques_file_size = qbObject.getString(
                                                            "file_size");

                                                }
                                                JSONArray ansArray = jsonObject.getJSONArray(
                                                        "Answer");
                                                Log.d("ans_array",ansArray.toString());
                                                for (int k = 0; k < ansArray.length(); k++) {
                                                    JSONObject ansObject = ansArray.getJSONObject(k);
                                                    uploaded_qp_id = ansObject.getString(
                                                            "uploaded_qp_id");
                                                    question_bank_id = ansObject.getString(
                                                            "question_bank_id");
                                                    ans_image_name = ansObject.getString(
                                                            "image_name");
                                                    ans_file_size = ansObject.getString(
                                                            "file_size");
                                                }

                                                JSONArray dataArray = jsonObject.getJSONArray(
                                                        "data");
                                                Log.d("data_array",dataArray.toString());
                                                for (int l = 0; l < dataArray.length(); l++) {
                                                    JSONObject dataObject =
                                                            dataArray.getJSONObject(l);

                                                    exam_id = dataObject.getString("exam_id");
                                                    class_id = dataObject.getString(
                                                            "class_id");
                                                    subject_id = dataObject.getString(
                                                            "subject_id");
                                                    qb_name = dataObject.getString(
                                                            "qb_name");
                                                    qb_type = dataObject.getString(
                                                            "qb_type");
                                                    instructions = dataObject.getString(
                                                            "instructions");
                                                    weightage = dataObject.getString(
                                                            "weightage");
                                                    create_date = dataObject.getString(
                                                            "create_date");
                                                    teacher_id = dataObject.getString(
                                                            "teacher_id");
                                                    complete = dataObject.getString(
                                                            "complete");

                                                }

                                                uploadEvaluationQuestionModel =
                                                        new UploadEvaluationQuestionModel(up_id,
                                                                upload_student_id,
                                                                upload_question_bank_id,
                                                                upload_date,
                                                                academic_yr,
                                                                ques_image_name, ques_file_size,
                                                                uploaded_qp_id,
                                                                ans_image_name, ans_file_size,
                                                                exam_id, class_id, subject_id,
                                                                qb_name, qb_type, instructions,
                                                                weightage, create_date,
                                                                teacher_id, complete);
                                                uploadEvaluationQuestionsList.add(uploadEvaluationQuestionModel);
                                                notifyDataSetChanged();
                                            }


                                            Intent intent = new Intent(context,
                                                    PenPaperEvaluationActivity.class);
                                            Bundle bundle = new Bundle();
                                            bundle.putSerializable("upload_model",
                                                    uploadEvaluationQuestionModel);
                                            intent.putExtras(bundle);
                                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                            context.startActivity(intent);
                                        }
                                        else {
                                            Toast.makeText(context, response.toString(),
                                                    Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                    catch (JSONException e) {
                                        e.printStackTrace();
                                        Toast.makeText(context, e.toString(), Toast.LENGTH_SHORT).show();
                                    }
                                }
                            }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            System.out.println("ERROR_RESPONSE - " + error.getMessage());
                            Toast.makeText(context, error.toString(), Toast.LENGTH_SHORT).show();
                        }
                    });
                    RequestQueue requestQueue1 = Volley.newRequestQueue(context);
                    jsonObjectRequest.setRetryPolicy(new DefaultRetryPolicy(
                            30000,
                            DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
                    requestQueue1.add(jsonObjectRequest);

                }
            }
        });
    }

    //setting count
    @Override
    public int getItemCount() {
        return evaluationStudentList.size();
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

}

